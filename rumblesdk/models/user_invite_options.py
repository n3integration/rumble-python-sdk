# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserInviteOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'client_admin': 'bool',
        'org_default_role': 'str',
        'org_roles': 'dict(str, object)',
        'subject': 'str',
        'message': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'client_admin': 'client_admin',
        'org_default_role': 'org_default_role',
        'org_roles': 'org_roles',
        'subject': 'subject',
        'message': 'message'
    }

    def __init__(self, first_name:str=None, last_name:str=None, email:str=None, client_admin:bool=None, org_default_role:str=None, org_roles:dict=None, subject:str=None, message:str=None):  # noqa: E501
        """UserInviteOptions - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._client_admin = None
        self._org_default_role = None
        self._org_roles = None
        self._subject = None
        self._message = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if client_admin is not None:
            self.client_admin = client_admin
        if org_default_role is not None:
            self.org_default_role = org_default_role
        if org_roles is not None:
            self.org_roles = org_roles
        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message

    @property
    def first_name(self):
        """Gets the first_name of this UserInviteOptions.  # noqa: E501


        :return: The first_name of this UserInviteOptions.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInviteOptions.


        :param first_name: The first_name of this UserInviteOptions.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserInviteOptions.  # noqa: E501


        :return: The last_name of this UserInviteOptions.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInviteOptions.


        :param last_name: The last_name of this UserInviteOptions.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserInviteOptions.  # noqa: E501


        :return: The email of this UserInviteOptions.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInviteOptions.


        :param email: The email of this UserInviteOptions.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def client_admin(self):
        """Gets the client_admin of this UserInviteOptions.  # noqa: E501


        :return: The client_admin of this UserInviteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._client_admin

    @client_admin.setter
    def client_admin(self, client_admin):
        """Sets the client_admin of this UserInviteOptions.


        :param client_admin: The client_admin of this UserInviteOptions.  # noqa: E501
        :type: bool
        """

        self._client_admin = client_admin

    @property
    def org_default_role(self):
        """Gets the org_default_role of this UserInviteOptions.  # noqa: E501


        :return: The org_default_role of this UserInviteOptions.  # noqa: E501
        :rtype: str
        """
        return self._org_default_role

    @org_default_role.setter
    def org_default_role(self, org_default_role):
        """Sets the org_default_role of this UserInviteOptions.


        :param org_default_role: The org_default_role of this UserInviteOptions.  # noqa: E501
        :type: str
        """

        self._org_default_role = org_default_role

    @property
    def org_roles(self):
        """Gets the org_roles of this UserInviteOptions.  # noqa: E501


        :return: The org_roles of this UserInviteOptions.  # noqa: E501
        :rtype: dict
        """
        return self._org_roles

    @org_roles.setter
    def org_roles(self, org_roles):
        """Sets the org_roles of this UserInviteOptions.


        :param org_roles: The org_roles of this UserInviteOptions.  # noqa: E501
        :type: dict
        """

        self._org_roles = org_roles

    @property
    def subject(self):
        """Gets the subject of this UserInviteOptions.  # noqa: E501


        :return: The subject of this UserInviteOptions.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this UserInviteOptions.


        :param subject: The subject of this UserInviteOptions.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this UserInviteOptions.  # noqa: E501


        :return: The message of this UserInviteOptions.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UserInviteOptions.


        :param message: The message of this UserInviteOptions.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(UserInviteOptions, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInviteOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
