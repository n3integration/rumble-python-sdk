# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'name': 'str',
        'activated_at': 'int',
        'license_type': 'str',
        'license_expiration': 'int',
        'license_max_assets': 'int',
        'license_live_asset_count': 'int',
        'license_project_asset_count': 'int',
        'via_reseller': 'bool',
        'phone': 'str',
        'address_street': 'str',
        'address_country': 'str',
        'address_city': 'str',
        'address_region': 'str',
        'address_postal': 'str',
        'subscription_period_start': 'int',
        'subscription_period_end': 'int',
        'subscription_cancel_at': 'int',
        'subscription_canceled_at': 'int',
        'settings': 'dict(str, object)',
        'sso_type': 'str',
        'sso_domain': 'str',
        'sso_mode': 'str',
        'sso_login_message': 'str',
        'sso_login_issuer_url': 'str',
        'sso_login_login_url': 'str',
        'sso_login_logout_url': 'str',
        'sso_default_role': 'str',
        'partner': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'name': 'name',
        'activated_at': 'activated_at',
        'license_type': 'license_type',
        'license_expiration': 'license_expiration',
        'license_max_assets': 'license_max_assets',
        'license_live_asset_count': 'license_live_asset_count',
        'license_project_asset_count': 'license_project_asset_count',
        'via_reseller': 'via_reseller',
        'phone': 'phone',
        'address_street': 'address_street',
        'address_country': 'address_country',
        'address_city': 'address_city',
        'address_region': 'address_region',
        'address_postal': 'address_postal',
        'subscription_period_start': 'subscription_period_start',
        'subscription_period_end': 'subscription_period_end',
        'subscription_cancel_at': 'subscription_cancel_at',
        'subscription_canceled_at': 'subscription_canceled_at',
        'settings': 'settings',
        'sso_type': 'sso_type',
        'sso_domain': 'sso_domain',
        'sso_mode': 'sso_mode',
        'sso_login_message': 'sso_login_message',
        'sso_login_issuer_url': 'sso_login_issuer_url',
        'sso_login_login_url': 'sso_login_login_url',
        'sso_login_logout_url': 'sso_login_logout_url',
        'sso_default_role': 'sso_default_role',
        'partner': 'partner'
    }

    def __init__(self, id:str=None, created_at:int=None, updated_at:int=None, name:str=None, activated_at:int=None, license_type:str=None, license_expiration:int=None, license_max_assets:int=None, license_live_asset_count:int=None, license_project_asset_count:int=None, via_reseller:bool=None, phone:str=None, address_street:str=None, address_country:str=None, address_city:str=None, address_region:str=None, address_postal:str=None, subscription_period_start:int=None, subscription_period_end:int=None, subscription_cancel_at:int=None, subscription_canceled_at:int=None, settings:dict=None, sso_type:str=None, sso_domain:str=None, sso_mode:str=None, sso_login_message:str=None, sso_login_issuer_url:str=None, sso_login_login_url:str=None, sso_login_logout_url:str=None, sso_default_role:str=None, partner:str=None):  # noqa: E501
        """License - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._name = None
        self._activated_at = None
        self._license_type = None
        self._license_expiration = None
        self._license_max_assets = None
        self._license_live_asset_count = None
        self._license_project_asset_count = None
        self._via_reseller = None
        self._phone = None
        self._address_street = None
        self._address_country = None
        self._address_city = None
        self._address_region = None
        self._address_postal = None
        self._subscription_period_start = None
        self._subscription_period_end = None
        self._subscription_cancel_at = None
        self._subscription_canceled_at = None
        self._settings = None
        self._sso_type = None
        self._sso_domain = None
        self._sso_mode = None
        self._sso_login_message = None
        self._sso_login_issuer_url = None
        self._sso_login_login_url = None
        self._sso_login_logout_url = None
        self._sso_default_role = None
        self._partner = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if name is not None:
            self.name = name
        if activated_at is not None:
            self.activated_at = activated_at
        if license_type is not None:
            self.license_type = license_type
        if license_expiration is not None:
            self.license_expiration = license_expiration
        if license_max_assets is not None:
            self.license_max_assets = license_max_assets
        if license_live_asset_count is not None:
            self.license_live_asset_count = license_live_asset_count
        if license_project_asset_count is not None:
            self.license_project_asset_count = license_project_asset_count
        if via_reseller is not None:
            self.via_reseller = via_reseller
        if phone is not None:
            self.phone = phone
        if address_street is not None:
            self.address_street = address_street
        if address_country is not None:
            self.address_country = address_country
        if address_city is not None:
            self.address_city = address_city
        if address_region is not None:
            self.address_region = address_region
        if address_postal is not None:
            self.address_postal = address_postal
        if subscription_period_start is not None:
            self.subscription_period_start = subscription_period_start
        if subscription_period_end is not None:
            self.subscription_period_end = subscription_period_end
        if subscription_cancel_at is not None:
            self.subscription_cancel_at = subscription_cancel_at
        if subscription_canceled_at is not None:
            self.subscription_canceled_at = subscription_canceled_at
        if settings is not None:
            self.settings = settings
        if sso_type is not None:
            self.sso_type = sso_type
        if sso_domain is not None:
            self.sso_domain = sso_domain
        if sso_mode is not None:
            self.sso_mode = sso_mode
        if sso_login_message is not None:
            self.sso_login_message = sso_login_message
        if sso_login_issuer_url is not None:
            self.sso_login_issuer_url = sso_login_issuer_url
        if sso_login_login_url is not None:
            self.sso_login_login_url = sso_login_login_url
        if sso_login_logout_url is not None:
            self.sso_login_logout_url = sso_login_logout_url
        if sso_default_role is not None:
            self.sso_default_role = sso_default_role
        if partner is not None:
            self.partner = partner

    @property
    def id(self):
        """Gets the id of this License.  # noqa: E501


        :return: The id of this License.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this License.


        :param id: The id of this License.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this License.  # noqa: E501


        :return: The created_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this License.


        :param created_at: The created_at of this License.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this License.  # noqa: E501


        :return: The updated_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this License.


        :param updated_at: The updated_at of this License.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this License.  # noqa: E501


        :return: The name of this License.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.


        :param name: The name of this License.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def activated_at(self):
        """Gets the activated_at of this License.  # noqa: E501


        :return: The activated_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this License.


        :param activated_at: The activated_at of this License.  # noqa: E501
        :type: int
        """

        self._activated_at = activated_at

    @property
    def license_type(self):
        """Gets the license_type of this License.  # noqa: E501


        :return: The license_type of this License.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this License.


        :param license_type: The license_type of this License.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def license_expiration(self):
        """Gets the license_expiration of this License.  # noqa: E501


        :return: The license_expiration of this License.  # noqa: E501
        :rtype: int
        """
        return self._license_expiration

    @license_expiration.setter
    def license_expiration(self, license_expiration):
        """Sets the license_expiration of this License.


        :param license_expiration: The license_expiration of this License.  # noqa: E501
        :type: int
        """

        self._license_expiration = license_expiration

    @property
    def license_max_assets(self):
        """Gets the license_max_assets of this License.  # noqa: E501


        :return: The license_max_assets of this License.  # noqa: E501
        :rtype: int
        """
        return self._license_max_assets

    @license_max_assets.setter
    def license_max_assets(self, license_max_assets):
        """Sets the license_max_assets of this License.


        :param license_max_assets: The license_max_assets of this License.  # noqa: E501
        :type: int
        """

        self._license_max_assets = license_max_assets

    @property
    def license_live_asset_count(self):
        """Gets the license_live_asset_count of this License.  # noqa: E501


        :return: The license_live_asset_count of this License.  # noqa: E501
        :rtype: int
        """
        return self._license_live_asset_count

    @license_live_asset_count.setter
    def license_live_asset_count(self, license_live_asset_count):
        """Sets the license_live_asset_count of this License.


        :param license_live_asset_count: The license_live_asset_count of this License.  # noqa: E501
        :type: int
        """

        self._license_live_asset_count = license_live_asset_count

    @property
    def license_project_asset_count(self):
        """Gets the license_project_asset_count of this License.  # noqa: E501


        :return: The license_project_asset_count of this License.  # noqa: E501
        :rtype: int
        """
        return self._license_project_asset_count

    @license_project_asset_count.setter
    def license_project_asset_count(self, license_project_asset_count):
        """Sets the license_project_asset_count of this License.


        :param license_project_asset_count: The license_project_asset_count of this License.  # noqa: E501
        :type: int
        """

        self._license_project_asset_count = license_project_asset_count

    @property
    def via_reseller(self):
        """Gets the via_reseller of this License.  # noqa: E501


        :return: The via_reseller of this License.  # noqa: E501
        :rtype: bool
        """
        return self._via_reseller

    @via_reseller.setter
    def via_reseller(self, via_reseller):
        """Sets the via_reseller of this License.


        :param via_reseller: The via_reseller of this License.  # noqa: E501
        :type: bool
        """

        self._via_reseller = via_reseller

    @property
    def phone(self):
        """Gets the phone of this License.  # noqa: E501


        :return: The phone of this License.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this License.


        :param phone: The phone of this License.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def address_street(self):
        """Gets the address_street of this License.  # noqa: E501


        :return: The address_street of this License.  # noqa: E501
        :rtype: str
        """
        return self._address_street

    @address_street.setter
    def address_street(self, address_street):
        """Sets the address_street of this License.


        :param address_street: The address_street of this License.  # noqa: E501
        :type: str
        """

        self._address_street = address_street

    @property
    def address_country(self):
        """Gets the address_country of this License.  # noqa: E501


        :return: The address_country of this License.  # noqa: E501
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this License.


        :param address_country: The address_country of this License.  # noqa: E501
        :type: str
        """

        self._address_country = address_country

    @property
    def address_city(self):
        """Gets the address_city of this License.  # noqa: E501


        :return: The address_city of this License.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this License.


        :param address_city: The address_city of this License.  # noqa: E501
        :type: str
        """

        self._address_city = address_city

    @property
    def address_region(self):
        """Gets the address_region of this License.  # noqa: E501


        :return: The address_region of this License.  # noqa: E501
        :rtype: str
        """
        return self._address_region

    @address_region.setter
    def address_region(self, address_region):
        """Sets the address_region of this License.


        :param address_region: The address_region of this License.  # noqa: E501
        :type: str
        """

        self._address_region = address_region

    @property
    def address_postal(self):
        """Gets the address_postal of this License.  # noqa: E501


        :return: The address_postal of this License.  # noqa: E501
        :rtype: str
        """
        return self._address_postal

    @address_postal.setter
    def address_postal(self, address_postal):
        """Sets the address_postal of this License.


        :param address_postal: The address_postal of this License.  # noqa: E501
        :type: str
        """

        self._address_postal = address_postal

    @property
    def subscription_period_start(self):
        """Gets the subscription_period_start of this License.  # noqa: E501


        :return: The subscription_period_start of this License.  # noqa: E501
        :rtype: int
        """
        return self._subscription_period_start

    @subscription_period_start.setter
    def subscription_period_start(self, subscription_period_start):
        """Sets the subscription_period_start of this License.


        :param subscription_period_start: The subscription_period_start of this License.  # noqa: E501
        :type: int
        """

        self._subscription_period_start = subscription_period_start

    @property
    def subscription_period_end(self):
        """Gets the subscription_period_end of this License.  # noqa: E501


        :return: The subscription_period_end of this License.  # noqa: E501
        :rtype: int
        """
        return self._subscription_period_end

    @subscription_period_end.setter
    def subscription_period_end(self, subscription_period_end):
        """Sets the subscription_period_end of this License.


        :param subscription_period_end: The subscription_period_end of this License.  # noqa: E501
        :type: int
        """

        self._subscription_period_end = subscription_period_end

    @property
    def subscription_cancel_at(self):
        """Gets the subscription_cancel_at of this License.  # noqa: E501


        :return: The subscription_cancel_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._subscription_cancel_at

    @subscription_cancel_at.setter
    def subscription_cancel_at(self, subscription_cancel_at):
        """Sets the subscription_cancel_at of this License.


        :param subscription_cancel_at: The subscription_cancel_at of this License.  # noqa: E501
        :type: int
        """

        self._subscription_cancel_at = subscription_cancel_at

    @property
    def subscription_canceled_at(self):
        """Gets the subscription_canceled_at of this License.  # noqa: E501


        :return: The subscription_canceled_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._subscription_canceled_at

    @subscription_canceled_at.setter
    def subscription_canceled_at(self, subscription_canceled_at):
        """Sets the subscription_canceled_at of this License.


        :param subscription_canceled_at: The subscription_canceled_at of this License.  # noqa: E501
        :type: int
        """

        self._subscription_canceled_at = subscription_canceled_at

    @property
    def settings(self):
        """Gets the settings of this License.  # noqa: E501


        :return: The settings of this License.  # noqa: E501
        :rtype: dict
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this License.


        :param settings: The settings of this License.  # noqa: E501
        :type: dict
        """

        self._settings = settings

    @property
    def sso_type(self):
        """Gets the sso_type of this License.  # noqa: E501


        :return: The sso_type of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_type

    @sso_type.setter
    def sso_type(self, sso_type):
        """Sets the sso_type of this License.


        :param sso_type: The sso_type of this License.  # noqa: E501
        :type: str
        """

        self._sso_type = sso_type

    @property
    def sso_domain(self):
        """Gets the sso_domain of this License.  # noqa: E501


        :return: The sso_domain of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_domain

    @sso_domain.setter
    def sso_domain(self, sso_domain):
        """Sets the sso_domain of this License.


        :param sso_domain: The sso_domain of this License.  # noqa: E501
        :type: str
        """

        self._sso_domain = sso_domain

    @property
    def sso_mode(self):
        """Gets the sso_mode of this License.  # noqa: E501


        :return: The sso_mode of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_mode

    @sso_mode.setter
    def sso_mode(self, sso_mode):
        """Sets the sso_mode of this License.


        :param sso_mode: The sso_mode of this License.  # noqa: E501
        :type: str
        """

        self._sso_mode = sso_mode

    @property
    def sso_login_message(self):
        """Gets the sso_login_message of this License.  # noqa: E501


        :return: The sso_login_message of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_login_message

    @sso_login_message.setter
    def sso_login_message(self, sso_login_message):
        """Sets the sso_login_message of this License.


        :param sso_login_message: The sso_login_message of this License.  # noqa: E501
        :type: str
        """

        self._sso_login_message = sso_login_message

    @property
    def sso_login_issuer_url(self):
        """Gets the sso_login_issuer_url of this License.  # noqa: E501


        :return: The sso_login_issuer_url of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_login_issuer_url

    @sso_login_issuer_url.setter
    def sso_login_issuer_url(self, sso_login_issuer_url):
        """Sets the sso_login_issuer_url of this License.


        :param sso_login_issuer_url: The sso_login_issuer_url of this License.  # noqa: E501
        :type: str
        """

        self._sso_login_issuer_url = sso_login_issuer_url

    @property
    def sso_login_login_url(self):
        """Gets the sso_login_login_url of this License.  # noqa: E501


        :return: The sso_login_login_url of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_login_login_url

    @sso_login_login_url.setter
    def sso_login_login_url(self, sso_login_login_url):
        """Sets the sso_login_login_url of this License.


        :param sso_login_login_url: The sso_login_login_url of this License.  # noqa: E501
        :type: str
        """

        self._sso_login_login_url = sso_login_login_url

    @property
    def sso_login_logout_url(self):
        """Gets the sso_login_logout_url of this License.  # noqa: E501


        :return: The sso_login_logout_url of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_login_logout_url

    @sso_login_logout_url.setter
    def sso_login_logout_url(self, sso_login_logout_url):
        """Sets the sso_login_logout_url of this License.


        :param sso_login_logout_url: The sso_login_logout_url of this License.  # noqa: E501
        :type: str
        """

        self._sso_login_logout_url = sso_login_logout_url

    @property
    def sso_default_role(self):
        """Gets the sso_default_role of this License.  # noqa: E501


        :return: The sso_default_role of this License.  # noqa: E501
        :rtype: str
        """
        return self._sso_default_role

    @sso_default_role.setter
    def sso_default_role(self, sso_default_role):
        """Sets the sso_default_role of this License.


        :param sso_default_role: The sso_default_role of this License.  # noqa: E501
        :type: str
        """

        self._sso_default_role = sso_default_role

    @property
    def partner(self):
        """Gets the partner of this License.  # noqa: E501


        :return: The partner of this License.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this License.


        :param partner: The partner of this License.  # noqa: E501
        :type: str
        """

        self._partner = partner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(License, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
