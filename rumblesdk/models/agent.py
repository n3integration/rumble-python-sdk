# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Agent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'organization_id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'host_id': 'str',
        'hub_id': 'str',
        'name': 'str',
        'site_id': 'str',
        'last_checkin': 'int',
        'os': 'str',
        'arch': 'str',
        'version': 'str',
        'external_ip': 'str',
        'internal_ip': 'str',
        'system_info': 'dict(str, object)',
        'connected': 'bool',
        'inactive': 'bool',
        'deactivated_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'client_id',
        'organization_id': 'organization_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'host_id': 'host_id',
        'hub_id': 'hub_id',
        'name': 'name',
        'site_id': 'site_id',
        'last_checkin': 'last_checkin',
        'os': 'os',
        'arch': 'arch',
        'version': 'version',
        'external_ip': 'external_ip',
        'internal_ip': 'internal_ip',
        'system_info': 'system_info',
        'connected': 'connected',
        'inactive': 'inactive',
        'deactivated_at': 'deactivated_at'
    }

    def __init__(self, id:str=None, client_id:str=None, organization_id:str=None, created_at:int=None, updated_at:int=None, host_id:str=None, hub_id:str=None, name:str=None, site_id:str=None, last_checkin:int=None, os:str=None, arch:str=None, version:str=None, external_ip:str=None, internal_ip:str=None, system_info:dict=None, connected:bool=None, inactive:bool=None, deactivated_at:int=None):  # noqa: E501
        """Agent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client_id = None
        self._organization_id = None
        self._created_at = None
        self._updated_at = None
        self._host_id = None
        self._hub_id = None
        self._name = None
        self._site_id = None
        self._last_checkin = None
        self._os = None
        self._arch = None
        self._version = None
        self._external_ip = None
        self._internal_ip = None
        self._system_info = None
        self._connected = None
        self._inactive = None
        self._deactivated_at = None
        self.discriminator = None
        self.id = id
        if client_id is not None:
            self.client_id = client_id
        if organization_id is not None:
            self.organization_id = organization_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if host_id is not None:
            self.host_id = host_id
        if hub_id is not None:
            self.hub_id = hub_id
        if name is not None:
            self.name = name
        if site_id is not None:
            self.site_id = site_id
        if last_checkin is not None:
            self.last_checkin = last_checkin
        if os is not None:
            self.os = os
        if arch is not None:
            self.arch = arch
        if version is not None:
            self.version = version
        if external_ip is not None:
            self.external_ip = external_ip
        if internal_ip is not None:
            self.internal_ip = internal_ip
        if system_info is not None:
            self.system_info = system_info
        if connected is not None:
            self.connected = connected
        if inactive is not None:
            self.inactive = inactive
        if deactivated_at is not None:
            self.deactivated_at = deactivated_at

    @property
    def id(self):
        """Gets the id of this Agent.  # noqa: E501


        :return: The id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Agent.


        :param id: The id of this Agent.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this Agent.  # noqa: E501


        :return: The client_id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Agent.


        :param client_id: The client_id of this Agent.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Agent.  # noqa: E501


        :return: The organization_id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Agent.


        :param organization_id: The organization_id of this Agent.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def created_at(self):
        """Gets the created_at of this Agent.  # noqa: E501


        :return: The created_at of this Agent.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Agent.


        :param created_at: The created_at of this Agent.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Agent.  # noqa: E501


        :return: The updated_at of this Agent.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Agent.


        :param updated_at: The updated_at of this Agent.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def host_id(self):
        """Gets the host_id of this Agent.  # noqa: E501


        :return: The host_id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this Agent.


        :param host_id: The host_id of this Agent.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def hub_id(self):
        """Gets the hub_id of this Agent.  # noqa: E501


        :return: The hub_id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._hub_id

    @hub_id.setter
    def hub_id(self, hub_id):
        """Sets the hub_id of this Agent.


        :param hub_id: The hub_id of this Agent.  # noqa: E501
        :type: str
        """

        self._hub_id = hub_id

    @property
    def name(self):
        """Gets the name of this Agent.  # noqa: E501


        :return: The name of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Agent.


        :param name: The name of this Agent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_id(self):
        """Gets the site_id of this Agent.  # noqa: E501


        :return: The site_id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Agent.


        :param site_id: The site_id of this Agent.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def last_checkin(self):
        """Gets the last_checkin of this Agent.  # noqa: E501


        :return: The last_checkin of this Agent.  # noqa: E501
        :rtype: int
        """
        return self._last_checkin

    @last_checkin.setter
    def last_checkin(self, last_checkin):
        """Sets the last_checkin of this Agent.


        :param last_checkin: The last_checkin of this Agent.  # noqa: E501
        :type: int
        """

        self._last_checkin = last_checkin

    @property
    def os(self):
        """Gets the os of this Agent.  # noqa: E501


        :return: The os of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Agent.


        :param os: The os of this Agent.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def arch(self):
        """Gets the arch of this Agent.  # noqa: E501


        :return: The arch of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this Agent.


        :param arch: The arch of this Agent.  # noqa: E501
        :type: str
        """

        self._arch = arch

    @property
    def version(self):
        """Gets the version of this Agent.  # noqa: E501


        :return: The version of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Agent.


        :param version: The version of this Agent.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def external_ip(self):
        """Gets the external_ip of this Agent.  # noqa: E501


        :return: The external_ip of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._external_ip

    @external_ip.setter
    def external_ip(self, external_ip):
        """Sets the external_ip of this Agent.


        :param external_ip: The external_ip of this Agent.  # noqa: E501
        :type: str
        """

        self._external_ip = external_ip

    @property
    def internal_ip(self):
        """Gets the internal_ip of this Agent.  # noqa: E501


        :return: The internal_ip of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._internal_ip

    @internal_ip.setter
    def internal_ip(self, internal_ip):
        """Sets the internal_ip of this Agent.


        :param internal_ip: The internal_ip of this Agent.  # noqa: E501
        :type: str
        """

        self._internal_ip = internal_ip

    @property
    def system_info(self):
        """Gets the system_info of this Agent.  # noqa: E501


        :return: The system_info of this Agent.  # noqa: E501
        :rtype: dict
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """Sets the system_info of this Agent.


        :param system_info: The system_info of this Agent.  # noqa: E501
        :type: dict
        """

        self._system_info = system_info

    @property
    def connected(self):
        """Gets the connected of this Agent.  # noqa: E501


        :return: The connected of this Agent.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this Agent.


        :param connected: The connected of this Agent.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def inactive(self):
        """Gets the inactive of this Agent.  # noqa: E501


        :return: The inactive of this Agent.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this Agent.


        :param inactive: The inactive of this Agent.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def deactivated_at(self):
        """Gets the deactivated_at of this Agent.  # noqa: E501


        :return: The deactivated_at of this Agent.  # noqa: E501
        :rtype: int
        """
        return self._deactivated_at

    @deactivated_at.setter
    def deactivated_at(self, deactivated_at):
        """Sets the deactivated_at of this Agent.


        :param deactivated_at: The deactivated_at of this Agent.  # noqa: E501
        :type: int
        """

        self._deactivated_at = deactivated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(Agent, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Agent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
