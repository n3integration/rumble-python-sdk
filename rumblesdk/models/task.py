# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'client_id': 'str',
        'organization_id': 'str',
        'agent_id': 'str',
        'site_id': 'str',
        'cruncher_id': 'str',
        'created_at': 'int',
        'created_by': 'str',
        'created_by_user_id': 'str',
        'updated_at': 'int',
        'type': 'str',
        'status': 'str',
        'error': 'str',
        'params': 'dict(str, str)',
        'stats': 'dict(str, object)',
        'hidden': 'bool',
        'parent_id': 'str',
        'recur': 'bool',
        'recur_frequency': 'str',
        'start_time': 'int',
        'recur_last': 'int',
        'recur_next': 'int',
        'recur_last_task_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'client_id': 'client_id',
        'organization_id': 'organization_id',
        'agent_id': 'agent_id',
        'site_id': 'site_id',
        'cruncher_id': 'cruncher_id',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'created_by_user_id': 'created_by_user_id',
        'updated_at': 'updated_at',
        'type': 'type',
        'status': 'status',
        'error': 'error',
        'params': 'params',
        'stats': 'stats',
        'hidden': 'hidden',
        'parent_id': 'parent_id',
        'recur': 'recur',
        'recur_frequency': 'recur_frequency',
        'start_time': 'start_time',
        'recur_last': 'recur_last',
        'recur_next': 'recur_next',
        'recur_last_task_id': 'recur_last_task_id'
    }

    def __init__(self, id:str=None, name:str=None, description:str=None, client_id:str=None, organization_id:str=None, agent_id:str=None, site_id:str=None, cruncher_id:str=None, created_at:int=None, created_by:str=None, created_by_user_id:str=None, updated_at:int=None, type:str=None, status:str=None, error:str=None, params:dict=None, stats:dict=None, hidden:bool=None, parent_id:str=None, recur:bool=None, recur_frequency:str=None, start_time:int=None, recur_last:int=None, recur_next:int=None, recur_last_task_id:str=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._client_id = None
        self._organization_id = None
        self._agent_id = None
        self._site_id = None
        self._cruncher_id = None
        self._created_at = None
        self._created_by = None
        self._created_by_user_id = None
        self._updated_at = None
        self._type = None
        self._status = None
        self._error = None
        self._params = None
        self._stats = None
        self._hidden = None
        self._parent_id = None
        self._recur = None
        self._recur_frequency = None
        self._start_time = None
        self._recur_last = None
        self._recur_next = None
        self._recur_last_task_id = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if client_id is not None:
            self.client_id = client_id
        if organization_id is not None:
            self.organization_id = organization_id
        if agent_id is not None:
            self.agent_id = agent_id
        if site_id is not None:
            self.site_id = site_id
        if cruncher_id is not None:
            self.cruncher_id = cruncher_id
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if updated_at is not None:
            self.updated_at = updated_at
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error
        if params is not None:
            self.params = params
        if stats is not None:
            self.stats = stats
        if hidden is not None:
            self.hidden = hidden
        if parent_id is not None:
            self.parent_id = parent_id
        if recur is not None:
            self.recur = recur
        if recur_frequency is not None:
            self.recur_frequency = recur_frequency
        if start_time is not None:
            self.start_time = start_time
        if recur_last is not None:
            self.recur_last = recur_last
        if recur_next is not None:
            self.recur_next = recur_next
        if recur_last_task_id is not None:
            self.recur_last_task_id = recur_last_task_id

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501


        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501


        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.


        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def client_id(self):
        """Gets the client_id of this Task.  # noqa: E501


        :return: The client_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Task.


        :param client_id: The client_id of this Task.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Task.  # noqa: E501


        :return: The organization_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Task.


        :param organization_id: The organization_id of this Task.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def agent_id(self):
        """Gets the agent_id of this Task.  # noqa: E501


        :return: The agent_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this Task.


        :param agent_id: The agent_id of this Task.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def site_id(self):
        """Gets the site_id of this Task.  # noqa: E501


        :return: The site_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Task.


        :param site_id: The site_id of this Task.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def cruncher_id(self):
        """Gets the cruncher_id of this Task.  # noqa: E501


        :return: The cruncher_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._cruncher_id

    @cruncher_id.setter
    def cruncher_id(self, cruncher_id):
        """Sets the cruncher_id of this Task.


        :param cruncher_id: The cruncher_id of this Task.  # noqa: E501
        :type: str
        """

        self._cruncher_id = cruncher_id

    @property
    def created_at(self):
        """Gets the created_at of this Task.  # noqa: E501


        :return: The created_at of this Task.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.


        :param created_at: The created_at of this Task.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Task.  # noqa: E501


        :return: The created_by of this Task.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Task.


        :param created_by: The created_by of this Task.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this Task.  # noqa: E501


        :return: The created_by_user_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this Task.


        :param created_by_user_id: The created_by_user_id of this Task.  # noqa: E501
        :type: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.  # noqa: E501


        :return: The updated_at of this Task.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.


        :param updated_at: The updated_at of this Task.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this Task.  # noqa: E501


        :return: The type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Task.


        :param type: The type of this Task.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def error(self):
        """Gets the error of this Task.  # noqa: E501


        :return: The error of this Task.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Task.


        :param error: The error of this Task.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def params(self):
        """Gets the params of this Task.  # noqa: E501


        :return: The params of this Task.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Task.


        :param params: The params of this Task.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def stats(self):
        """Gets the stats of this Task.  # noqa: E501


        :return: The stats of this Task.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Task.


        :param stats: The stats of this Task.  # noqa: E501
        :type: dict(str, object)
        """

        self._stats = stats

    @property
    def hidden(self):
        """Gets the hidden of this Task.  # noqa: E501


        :return: The hidden of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Task.


        :param hidden: The hidden of this Task.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def parent_id(self):
        """Gets the parent_id of this Task.  # noqa: E501


        :return: The parent_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Task.


        :param parent_id: The parent_id of this Task.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def recur(self):
        """Gets the recur of this Task.  # noqa: E501


        :return: The recur of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._recur

    @recur.setter
    def recur(self, recur):
        """Sets the recur of this Task.


        :param recur: The recur of this Task.  # noqa: E501
        :type: bool
        """

        self._recur = recur

    @property
    def recur_frequency(self):
        """Gets the recur_frequency of this Task.  # noqa: E501


        :return: The recur_frequency of this Task.  # noqa: E501
        :rtype: str
        """
        return self._recur_frequency

    @recur_frequency.setter
    def recur_frequency(self, recur_frequency):
        """Sets the recur_frequency of this Task.


        :param recur_frequency: The recur_frequency of this Task.  # noqa: E501
        :type: str
        """

        self._recur_frequency = recur_frequency

    @property
    def start_time(self):
        """Gets the start_time of this Task.  # noqa: E501


        :return: The start_time of this Task.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Task.


        :param start_time: The start_time of this Task.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def recur_last(self):
        """Gets the recur_last of this Task.  # noqa: E501


        :return: The recur_last of this Task.  # noqa: E501
        :rtype: int
        """
        return self._recur_last

    @recur_last.setter
    def recur_last(self, recur_last):
        """Sets the recur_last of this Task.


        :param recur_last: The recur_last of this Task.  # noqa: E501
        :type: int
        """

        self._recur_last = recur_last

    @property
    def recur_next(self):
        """Gets the recur_next of this Task.  # noqa: E501


        :return: The recur_next of this Task.  # noqa: E501
        :rtype: int
        """
        return self._recur_next

    @recur_next.setter
    def recur_next(self, recur_next):
        """Sets the recur_next of this Task.


        :param recur_next: The recur_next of this Task.  # noqa: E501
        :type: int
        """

        self._recur_next = recur_next

    @property
    def recur_last_task_id(self):
        """Gets the recur_last_task_id of this Task.  # noqa: E501


        :return: The recur_last_task_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._recur_last_task_id

    @recur_last_task_id.setter
    def recur_last_task_id(self, recur_last_task_id):
        """Sets the recur_last_task_id of this Task.


        :param recur_last_task_id: The recur_last_task_id of this Task.  # noqa: E501
        :type: str
        """

        self._recur_last_task_id = recur_last_task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
