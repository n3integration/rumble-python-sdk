# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'client_admin': 'bool',
        'org_default_role': 'str',
        'org_roles': 'dict(str, object)',
        'reset_token_expiration': 'int',
        'invite_token_expiration': 'int',
        'last_login_ip': 'str',
        'last_login_at': 'int',
        'last_login_ua': 'str',
        'sso_only': 'bool',
        'login_failures': 'int'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'client_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'client_admin': 'client_admin',
        'org_default_role': 'org_default_role',
        'org_roles': 'org_roles',
        'reset_token_expiration': 'reset_token_expiration',
        'invite_token_expiration': 'invite_token_expiration',
        'last_login_ip': 'last_login_ip',
        'last_login_at': 'last_login_at',
        'last_login_ua': 'last_login_ua',
        'sso_only': 'sso_only',
        'login_failures': 'login_failures'
    }

    def __init__(self, id:str=None, client_id:str=None, created_at:int=None, updated_at:int=None, first_name:str=None, last_name:str=None, email:str=None, client_admin:bool=None, org_default_role:str=None, org_roles:dict=None, reset_token_expiration:int=None, invite_token_expiration:int=None, last_login_ip:str=None, last_login_at:int=None, last_login_ua:str=None, sso_only:bool=None, login_failures:int=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client_id = None
        self._created_at = None
        self._updated_at = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._client_admin = None
        self._org_default_role = None
        self._org_roles = None
        self._reset_token_expiration = None
        self._invite_token_expiration = None
        self._last_login_ip = None
        self._last_login_at = None
        self._last_login_ua = None
        self._sso_only = None
        self._login_failures = None
        self.discriminator = None
        self.id = id
        if client_id is not None:
            self.client_id = client_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if client_admin is not None:
            self.client_admin = client_admin
        if org_default_role is not None:
            self.org_default_role = org_default_role
        if org_roles is not None:
            self.org_roles = org_roles
        if reset_token_expiration is not None:
            self.reset_token_expiration = reset_token_expiration
        if invite_token_expiration is not None:
            self.invite_token_expiration = invite_token_expiration
        if last_login_ip is not None:
            self.last_login_ip = last_login_ip
        if last_login_at is not None:
            self.last_login_at = last_login_at
        if last_login_ua is not None:
            self.last_login_ua = last_login_ua
        if sso_only is not None:
            self.sso_only = sso_only
        if login_failures is not None:
            self.login_failures = login_failures

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this User.  # noqa: E501


        :return: The client_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this User.


        :param client_id: The client_id of this User.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501


        :return: The updated_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def client_admin(self):
        """Gets the client_admin of this User.  # noqa: E501


        :return: The client_admin of this User.  # noqa: E501
        :rtype: bool
        """
        return self._client_admin

    @client_admin.setter
    def client_admin(self, client_admin):
        """Sets the client_admin of this User.


        :param client_admin: The client_admin of this User.  # noqa: E501
        :type: bool
        """

        self._client_admin = client_admin

    @property
    def org_default_role(self):
        """Gets the org_default_role of this User.  # noqa: E501


        :return: The org_default_role of this User.  # noqa: E501
        :rtype: str
        """
        return self._org_default_role

    @org_default_role.setter
    def org_default_role(self, org_default_role):
        """Sets the org_default_role of this User.


        :param org_default_role: The org_default_role of this User.  # noqa: E501
        :type: str
        """

        self._org_default_role = org_default_role

    @property
    def org_roles(self):
        """Gets the org_roles of this User.  # noqa: E501


        :return: The org_roles of this User.  # noqa: E501
        :rtype: dict
        """
        return self._org_roles

    @org_roles.setter
    def org_roles(self, org_roles):
        """Sets the org_roles of this User.


        :param org_roles: The org_roles of this User.  # noqa: E501
        :type: dict
        """

        self._org_roles = org_roles

    @property
    def reset_token_expiration(self):
        """Gets the reset_token_expiration of this User.  # noqa: E501


        :return: The reset_token_expiration of this User.  # noqa: E501
        :rtype: int
        """
        return self._reset_token_expiration

    @reset_token_expiration.setter
    def reset_token_expiration(self, reset_token_expiration):
        """Sets the reset_token_expiration of this User.


        :param reset_token_expiration: The reset_token_expiration of this User.  # noqa: E501
        :type: int
        """

        self._reset_token_expiration = reset_token_expiration

    @property
    def invite_token_expiration(self):
        """Gets the invite_token_expiration of this User.  # noqa: E501


        :return: The invite_token_expiration of this User.  # noqa: E501
        :rtype: int
        """
        return self._invite_token_expiration

    @invite_token_expiration.setter
    def invite_token_expiration(self, invite_token_expiration):
        """Sets the invite_token_expiration of this User.


        :param invite_token_expiration: The invite_token_expiration of this User.  # noqa: E501
        :type: int
        """

        self._invite_token_expiration = invite_token_expiration

    @property
    def last_login_ip(self):
        """Gets the last_login_ip of this User.  # noqa: E501


        :return: The last_login_ip of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_login_ip

    @last_login_ip.setter
    def last_login_ip(self, last_login_ip):
        """Sets the last_login_ip of this User.


        :param last_login_ip: The last_login_ip of this User.  # noqa: E501
        :type: str
        """

        self._last_login_ip = last_login_ip

    @property
    def last_login_at(self):
        """Gets the last_login_at of this User.  # noqa: E501


        :return: The last_login_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at):
        """Sets the last_login_at of this User.


        :param last_login_at: The last_login_at of this User.  # noqa: E501
        :type: int
        """

        self._last_login_at = last_login_at

    @property
    def last_login_ua(self):
        """Gets the last_login_ua of this User.  # noqa: E501


        :return: The last_login_ua of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_login_ua

    @last_login_ua.setter
    def last_login_ua(self, last_login_ua):
        """Sets the last_login_ua of this User.


        :param last_login_ua: The last_login_ua of this User.  # noqa: E501
        :type: str
        """

        self._last_login_ua = last_login_ua

    @property
    def sso_only(self):
        """Gets the sso_only of this User.  # noqa: E501


        :return: The sso_only of this User.  # noqa: E501
        :rtype: bool
        """
        return self._sso_only

    @sso_only.setter
    def sso_only(self, sso_only):
        """Sets the sso_only of this User.


        :param sso_only: The sso_only of this User.  # noqa: E501
        :type: bool
        """

        self._sso_only = sso_only

    @property
    def login_failures(self):
        """Gets the login_failures of this User.  # noqa: E501


        :return: The login_failures of this User.  # noqa: E501
        :rtype: int
        """
        return self._login_failures

    @login_failures.setter
    def login_failures(self, login_failures):
        """Sets the login_failures of this User.


        :param login_failures: The login_failures of this User.  # noqa: E501
        :type: int
        """

        self._login_failures = login_failures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
