# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Wireless(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'last_seen': 'int',
        'organization_id': 'str',
        'site_id': 'str',
        'last_agent_id': 'str',
        'last_task_id': 'str',
        'essid': 'str',
        'bssid': 'str',
        'type': 'str',
        'authentication': 'str',
        'encryption': 'str',
        'signal': 'int',
        'channels': 'str',
        'interface': 'str',
        'vendor': 'str',
        'family': 'str',
        'data': 'dict(str, str)',
        'org_name': 'str',
        'site_name': 'str',
        'agent_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'last_seen': 'last_seen',
        'organization_id': 'organization_id',
        'site_id': 'site_id',
        'last_agent_id': 'last_agent_id',
        'last_task_id': 'last_task_id',
        'essid': 'essid',
        'bssid': 'bssid',
        'type': 'type',
        'authentication': 'authentication',
        'encryption': 'encryption',
        'signal': 'signal',
        'channels': 'channels',
        'interface': 'interface',
        'vendor': 'vendor',
        'family': 'family',
        'data': 'data',
        'org_name': 'org_name',
        'site_name': 'site_name',
        'agent_name': 'agent_name'
    }

    def __init__(self, id:str=None, created_at:int=None, last_seen:int=None, organization_id:str=None, site_id:str=None, last_agent_id:str=None, last_task_id:str=None, essid:str=None, bssid:str=None, type:str=None, authentication:str=None, encryption:str=None, signal:int=None, channels:str=None, interface:str=None, vendor:str=None, family:str=None, data:dict=None, org_name:str=None, site_name:str=None, agent_name:str=None):  # noqa: E501
        """Wireless - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._last_seen = None
        self._organization_id = None
        self._site_id = None
        self._last_agent_id = None
        self._last_task_id = None
        self._essid = None
        self._bssid = None
        self._type = None
        self._authentication = None
        self._encryption = None
        self._signal = None
        self._channels = None
        self._interface = None
        self._vendor = None
        self._family = None
        self._data = None
        self._org_name = None
        self._site_name = None
        self._agent_name = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if last_seen is not None:
            self.last_seen = last_seen
        if organization_id is not None:
            self.organization_id = organization_id
        if site_id is not None:
            self.site_id = site_id
        if last_agent_id is not None:
            self.last_agent_id = last_agent_id
        if last_task_id is not None:
            self.last_task_id = last_task_id
        if essid is not None:
            self.essid = essid
        if bssid is not None:
            self.bssid = bssid
        if type is not None:
            self.type = type
        if authentication is not None:
            self.authentication = authentication
        if encryption is not None:
            self.encryption = encryption
        if signal is not None:
            self.signal = signal
        if channels is not None:
            self.channels = channels
        if interface is not None:
            self.interface = interface
        if vendor is not None:
            self.vendor = vendor
        if family is not None:
            self.family = family
        if data is not None:
            self.data = data
        if org_name is not None:
            self.org_name = org_name
        if site_name is not None:
            self.site_name = site_name
        if agent_name is not None:
            self.agent_name = agent_name

    @property
    def id(self):
        """Gets the id of this Wireless.  # noqa: E501


        :return: The id of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Wireless.


        :param id: The id of this Wireless.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Wireless.  # noqa: E501


        :return: The created_at of this Wireless.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Wireless.


        :param created_at: The created_at of this Wireless.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def last_seen(self):
        """Gets the last_seen of this Wireless.  # noqa: E501


        :return: The last_seen of this Wireless.  # noqa: E501
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Wireless.


        :param last_seen: The last_seen of this Wireless.  # noqa: E501
        :type: int
        """

        self._last_seen = last_seen

    @property
    def organization_id(self):
        """Gets the organization_id of this Wireless.  # noqa: E501


        :return: The organization_id of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Wireless.


        :param organization_id: The organization_id of this Wireless.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def site_id(self):
        """Gets the site_id of this Wireless.  # noqa: E501


        :return: The site_id of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Wireless.


        :param site_id: The site_id of this Wireless.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def last_agent_id(self):
        """Gets the last_agent_id of this Wireless.  # noqa: E501


        :return: The last_agent_id of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._last_agent_id

    @last_agent_id.setter
    def last_agent_id(self, last_agent_id):
        """Sets the last_agent_id of this Wireless.


        :param last_agent_id: The last_agent_id of this Wireless.  # noqa: E501
        :type: str
        """

        self._last_agent_id = last_agent_id

    @property
    def last_task_id(self):
        """Gets the last_task_id of this Wireless.  # noqa: E501


        :return: The last_task_id of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._last_task_id

    @last_task_id.setter
    def last_task_id(self, last_task_id):
        """Sets the last_task_id of this Wireless.


        :param last_task_id: The last_task_id of this Wireless.  # noqa: E501
        :type: str
        """

        self._last_task_id = last_task_id

    @property
    def essid(self):
        """Gets the essid of this Wireless.  # noqa: E501


        :return: The essid of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._essid

    @essid.setter
    def essid(self, essid):
        """Sets the essid of this Wireless.


        :param essid: The essid of this Wireless.  # noqa: E501
        :type: str
        """

        self._essid = essid

    @property
    def bssid(self):
        """Gets the bssid of this Wireless.  # noqa: E501


        :return: The bssid of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this Wireless.


        :param bssid: The bssid of this Wireless.  # noqa: E501
        :type: str
        """

        self._bssid = bssid

    @property
    def type(self):
        """Gets the type of this Wireless.  # noqa: E501


        :return: The type of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Wireless.


        :param type: The type of this Wireless.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def authentication(self):
        """Gets the authentication of this Wireless.  # noqa: E501


        :return: The authentication of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this Wireless.


        :param authentication: The authentication of this Wireless.  # noqa: E501
        :type: str
        """

        self._authentication = authentication

    @property
    def encryption(self):
        """Gets the encryption of this Wireless.  # noqa: E501


        :return: The encryption of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this Wireless.


        :param encryption: The encryption of this Wireless.  # noqa: E501
        :type: str
        """

        self._encryption = encryption

    @property
    def signal(self):
        """Gets the signal of this Wireless.  # noqa: E501


        :return: The signal of this Wireless.  # noqa: E501
        :rtype: int
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this Wireless.


        :param signal: The signal of this Wireless.  # noqa: E501
        :type: int
        """

        self._signal = signal

    @property
    def channels(self):
        """Gets the channels of this Wireless.  # noqa: E501


        :return: The channels of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Wireless.


        :param channels: The channels of this Wireless.  # noqa: E501
        :type: str
        """

        self._channels = channels

    @property
    def interface(self):
        """Gets the interface of this Wireless.  # noqa: E501


        :return: The interface of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this Wireless.


        :param interface: The interface of this Wireless.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def vendor(self):
        """Gets the vendor of this Wireless.  # noqa: E501


        :return: The vendor of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Wireless.


        :param vendor: The vendor of this Wireless.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def family(self):
        """Gets the family of this Wireless.  # noqa: E501


        :return: The family of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Wireless.


        :param family: The family of this Wireless.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def data(self):
        """Gets the data of this Wireless.  # noqa: E501


        :return: The data of this Wireless.  # noqa: E501
        :rtype: dict
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Wireless.


        :param data: The data of this Wireless.  # noqa: E501
        :type: dict
        """

        self._data = data

    @property
    def org_name(self):
        """Gets the org_name of this Wireless.  # noqa: E501


        :return: The org_name of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this Wireless.


        :param org_name: The org_name of this Wireless.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def site_name(self):
        """Gets the site_name of this Wireless.  # noqa: E501


        :return: The site_name of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this Wireless.


        :param site_name: The site_name of this Wireless.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def agent_name(self):
        """Gets the agent_name of this Wireless.  # noqa: E501


        :return: The agent_name of this Wireless.  # noqa: E501
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this Wireless.


        :param agent_name: The agent_name of this Wireless.  # noqa: E501
        :type: str
        """

        self._agent_name = agent_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(Wireless, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wireless):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
