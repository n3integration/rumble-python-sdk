# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Site(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'permanent': 'bool',
        'name': 'str',
        'description': 'str',
        'scope': 'str',
        'excludes': 'str',
        'subnets': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'permanent': 'permanent',
        'name': 'name',
        'description': 'description',
        'scope': 'scope',
        'excludes': 'excludes',
        'subnets': 'subnets'
    }

    def __init__(self, id:str=None, created_at:int=None, updated_at:int=None, permanent:bool=None, name:str=None, description:str=None, scope:str=None, excludes:str=None, subnets:dict=None):  # noqa: E501
        """Site - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._permanent = None
        self._name = None
        self._description = None
        self._scope = None
        self._excludes = None
        self._subnets = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if permanent is not None:
            self.permanent = permanent
        self.name = name
        if description is not None:
            self.description = description
        if scope is not None:
            self.scope = scope
        if excludes is not None:
            self.excludes = excludes
        if subnets is not None:
            self.subnets = subnets

    @property
    def id(self):
        """Gets the id of this Site.  # noqa: E501


        :return: The id of this Site.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Site.


        :param id: The id of this Site.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Site.  # noqa: E501


        :return: The created_at of this Site.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Site.


        :param created_at: The created_at of this Site.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Site.  # noqa: E501


        :return: The updated_at of this Site.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Site.


        :param updated_at: The updated_at of this Site.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def permanent(self):
        """Gets the permanent of this Site.  # noqa: E501


        :return: The permanent of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this Site.


        :param permanent: The permanent of this Site.  # noqa: E501
        :type: bool
        """

        self._permanent = permanent

    @property
    def name(self):
        """Gets the name of this Site.  # noqa: E501


        :return: The name of this Site.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.


        :param name: The name of this Site.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Site.  # noqa: E501


        :return: The description of this Site.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Site.


        :param description: The description of this Site.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def scope(self):
        """Gets the scope of this Site.  # noqa: E501


        :return: The scope of this Site.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Site.


        :param scope: The scope of this Site.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def excludes(self):
        """Gets the excludes of this Site.  # noqa: E501


        :return: The excludes of this Site.  # noqa: E501
        :rtype: str
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this Site.


        :param excludes: The excludes of this Site.  # noqa: E501
        :type: str
        """

        self._excludes = excludes

    @property
    def subnets(self):
        """Gets the subnets of this Site.  # noqa: E501


        :return: The subnets of this Site.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this Site.


        :param subnets: The subnets of this Site.  # noqa: E501
        :type: dict(str, object)
        """

        self._subnets = subnets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Site, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
