# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'group_id': 'str',
        'group_name': 'str',
        'sso_attribute': 'str',
        'sso_value': 'str',
        'description': 'str',
        'created_by_email': 'str',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'group_id': 'group_id',
        'group_name': 'group_name',
        'sso_attribute': 'sso_attribute',
        'sso_value': 'sso_value',
        'description': 'description',
        'created_by_email': 'created_by_email',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id:str=None, group_id:str=None, group_name:str=None, sso_attribute:str=None, sso_value:str=None, description:str=None, created_by_email:str=None, created_at:int=None, updated_at:int=None):  # noqa: E501
        """GroupMapping - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._group_id = None
        self._group_name = None
        self._sso_attribute = None
        self._sso_value = None
        self._description = None
        self._created_by_email = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        self.sso_attribute = sso_attribute
        self.sso_value = sso_value
        if description is not None:
            self.description = description
        if created_by_email is not None:
            self.created_by_email = created_by_email
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this GroupMapping.  # noqa: E501


        :return: The id of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupMapping.


        :param id: The id of this GroupMapping.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this GroupMapping.  # noqa: E501


        :return: The group_id of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupMapping.


        :param group_id: The group_id of this GroupMapping.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this GroupMapping.  # noqa: E501


        :return: The group_name of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupMapping.


        :param group_name: The group_name of this GroupMapping.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def sso_attribute(self):
        """Gets the sso_attribute of this GroupMapping.  # noqa: E501


        :return: The sso_attribute of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._sso_attribute

    @sso_attribute.setter
    def sso_attribute(self, sso_attribute):
        """Sets the sso_attribute of this GroupMapping.


        :param sso_attribute: The sso_attribute of this GroupMapping.  # noqa: E501
        :type: str
        """
        if sso_attribute is None:
            raise ValueError("Invalid value for `sso_attribute`, must not be `None`")  # noqa: E501

        self._sso_attribute = sso_attribute

    @property
    def sso_value(self):
        """Gets the sso_value of this GroupMapping.  # noqa: E501


        :return: The sso_value of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._sso_value

    @sso_value.setter
    def sso_value(self, sso_value):
        """Sets the sso_value of this GroupMapping.


        :param sso_value: The sso_value of this GroupMapping.  # noqa: E501
        :type: str
        """
        if sso_value is None:
            raise ValueError("Invalid value for `sso_value`, must not be `None`")  # noqa: E501

        self._sso_value = sso_value

    @property
    def description(self):
        """Gets the description of this GroupMapping.  # noqa: E501


        :return: The description of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupMapping.


        :param description: The description of this GroupMapping.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by_email(self):
        """Gets the created_by_email of this GroupMapping.  # noqa: E501


        :return: The created_by_email of this GroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._created_by_email

    @created_by_email.setter
    def created_by_email(self, created_by_email):
        """Sets the created_by_email of this GroupMapping.


        :param created_by_email: The created_by_email of this GroupMapping.  # noqa: E501
        :type: str
        """

        self._created_by_email = created_by_email

    @property
    def created_at(self):
        """Gets the created_at of this GroupMapping.  # noqa: E501


        :return: The created_at of this GroupMapping.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GroupMapping.


        :param created_at: The created_at of this GroupMapping.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GroupMapping.  # noqa: E501


        :return: The updated_at of this GroupMapping.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GroupMapping.


        :param updated_at: The updated_at of this GroupMapping.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(GroupMapping, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
