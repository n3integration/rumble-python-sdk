# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'client_id': 'str',
        'organization_id': 'str',
        'site_id': 'str',
        'action': 'str',
        'source_id': 'str',
        'source_name': 'str',
        'source_type': 'str',
        'target_id': 'str',
        'target_name': 'str',
        'target_type': 'str',
        'success': 'bool',
        'details': 'dict(str, object)',
        'state': 'str',
        'processor_id': 'str',
        'processed_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'client_id': 'client_id',
        'organization_id': 'organization_id',
        'site_id': 'site_id',
        'action': 'action',
        'source_id': 'source_id',
        'source_name': 'source_name',
        'source_type': 'source_type',
        'target_id': 'target_id',
        'target_name': 'target_name',
        'target_type': 'target_type',
        'success': 'success',
        'details': 'details',
        'state': 'state',
        'processor_id': 'processor_id',
        'processed_at': 'processed_at'
    }

    def __init__(self, id:str=None, created_at:int=None, client_id:str=None, organization_id:str=None, site_id:str=None, action:str=None, source_id:str=None, source_name:str=None, source_type:str=None, target_id:str=None, target_name:str=None, target_type:str=None, success:bool=None, details:dict=None, state:str=None, processor_id:str=None, processed_at:int=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._client_id = None
        self._organization_id = None
        self._site_id = None
        self._action = None
        self._source_id = None
        self._source_name = None
        self._source_type = None
        self._target_id = None
        self._target_name = None
        self._target_type = None
        self._success = None
        self._details = None
        self._state = None
        self._processor_id = None
        self._processed_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if client_id is not None:
            self.client_id = client_id
        if organization_id is not None:
            self.organization_id = organization_id
        if site_id is not None:
            self.site_id = site_id
        if action is not None:
            self.action = action
        if source_id is not None:
            self.source_id = source_id
        if source_name is not None:
            self.source_name = source_name
        if source_type is not None:
            self.source_type = source_type
        if target_id is not None:
            self.target_id = target_id
        if target_name is not None:
            self.target_name = target_name
        if target_type is not None:
            self.target_type = target_type
        if success is not None:
            self.success = success
        if details is not None:
            self.details = details
        if state is not None:
            self.state = state
        if processor_id is not None:
            self.processor_id = processor_id
        if processed_at is not None:
            self.processed_at = processed_at

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501


        :return: The created_at of this Event.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def client_id(self):
        """Gets the client_id of this Event.  # noqa: E501


        :return: The client_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Event.


        :param client_id: The client_id of this Event.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Event.  # noqa: E501


        :return: The organization_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Event.


        :param organization_id: The organization_id of this Event.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def site_id(self):
        """Gets the site_id of this Event.  # noqa: E501


        :return: The site_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Event.


        :param site_id: The site_id of this Event.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def action(self):
        """Gets the action of this Event.  # noqa: E501


        :return: The action of this Event.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Event.


        :param action: The action of this Event.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def source_id(self):
        """Gets the source_id of this Event.  # noqa: E501


        :return: The source_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Event.


        :param source_id: The source_id of this Event.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_name(self):
        """Gets the source_name of this Event.  # noqa: E501


        :return: The source_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this Event.


        :param source_name: The source_name of this Event.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def source_type(self):
        """Gets the source_type of this Event.  # noqa: E501


        :return: The source_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Event.


        :param source_type: The source_type of this Event.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def target_id(self):
        """Gets the target_id of this Event.  # noqa: E501


        :return: The target_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Event.


        :param target_id: The target_id of this Event.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def target_name(self):
        """Gets the target_name of this Event.  # noqa: E501


        :return: The target_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this Event.


        :param target_name: The target_name of this Event.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def target_type(self):
        """Gets the target_type of this Event.  # noqa: E501


        :return: The target_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Event.


        :param target_type: The target_type of this Event.  # noqa: E501
        :type: str
        """

        self._target_type = target_type

    @property
    def success(self):
        """Gets the success of this Event.  # noqa: E501


        :return: The success of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Event.


        :param success: The success of this Event.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def details(self):
        """Gets the details of this Event.  # noqa: E501


        :return: The details of this Event.  # noqa: E501
        :rtype: dict
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Event.


        :param details: The details of this Event.  # noqa: E501
        :type: dict
        """

        self._details = details

    @property
    def state(self):
        """Gets the state of this Event.  # noqa: E501


        :return: The state of this Event.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.


        :param state: The state of this Event.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def processor_id(self):
        """Gets the processor_id of this Event.  # noqa: E501


        :return: The processor_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this Event.


        :param processor_id: The processor_id of this Event.  # noqa: E501
        :type: str
        """

        self._processor_id = processor_id

    @property
    def processed_at(self):
        """Gets the processed_at of this Event.  # noqa: E501


        :return: The processed_at of this Event.  # noqa: E501
        :rtype: int
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this Event.


        :param processed_at: The processed_at of this Event.  # noqa: E501
        :type: int
        """

        self._processed_at = processed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
