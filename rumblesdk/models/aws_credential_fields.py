# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AWSCredentialFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'secret_access_key': 'str',
        'regions': 'str',
        'use_cross_account_org': 'str',
        'role': 'str'
    }

    attribute_map = {
        'access_key': 'access_key',
        'secret_access_key': 'secret_access_key',
        'regions': 'regions',
        'use_cross_account_org': 'use_cross_account_org',
        'role': 'role'
    }

    def __init__(self, access_key:str=None, secret_access_key:str=None, regions:str=None, use_cross_account_org:str=None, role:str=None):  # noqa: E501
        """AWSCredentialFields - a model defined in Swagger"""  # noqa: E501
        self._access_key = None
        self._secret_access_key = None
        self._regions = None
        self._use_cross_account_org = None
        self._role = None
        self.discriminator = None
        self.access_key = access_key
        self.secret_access_key = secret_access_key
        if regions is not None:
            self.regions = regions
        if use_cross_account_org is not None:
            self.use_cross_account_org = use_cross_account_org
        if role is not None:
            self.role = role

    @property
    def access_key(self):
        """Gets the access_key of this AWSCredentialFields.  # noqa: E501


        :return: The access_key of this AWSCredentialFields.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this AWSCredentialFields.


        :param access_key: The access_key of this AWSCredentialFields.  # noqa: E501
        :type: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")  # noqa: E501

        self._access_key = access_key

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this AWSCredentialFields.  # noqa: E501


        :return: The secret_access_key of this AWSCredentialFields.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this AWSCredentialFields.


        :param secret_access_key: The secret_access_key of this AWSCredentialFields.  # noqa: E501
        :type: str
        """
        if secret_access_key is None:
            raise ValueError("Invalid value for `secret_access_key`, must not be `None`")  # noqa: E501

        self._secret_access_key = secret_access_key

    @property
    def regions(self):
        """Gets the regions of this AWSCredentialFields.  # noqa: E501


        :return: The regions of this AWSCredentialFields.  # noqa: E501
        :rtype: str
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this AWSCredentialFields.


        :param regions: The regions of this AWSCredentialFields.  # noqa: E501
        :type: str
        """

        self._regions = regions

    @property
    def use_cross_account_org(self):
        """Gets the use_cross_account_org of this AWSCredentialFields.  # noqa: E501


        :return: The use_cross_account_org of this AWSCredentialFields.  # noqa: E501
        :rtype: str
        """
        return self._use_cross_account_org

    @use_cross_account_org.setter
    def use_cross_account_org(self, use_cross_account_org):
        """Sets the use_cross_account_org of this AWSCredentialFields.


        :param use_cross_account_org: The use_cross_account_org of this AWSCredentialFields.  # noqa: E501
        :type: str
        """

        self._use_cross_account_org = use_cross_account_org

    @property
    def role(self):
        """Gets the role of this AWSCredentialFields.  # noqa: E501


        :return: The role of this AWSCredentialFields.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AWSCredentialFields.


        :param role: The role of this AWSCredentialFields.  # noqa: E501
        :type: str
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(AWSCredentialFields, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWSCredentialFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
