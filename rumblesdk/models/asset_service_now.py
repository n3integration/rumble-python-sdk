# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetServiceNow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_id': 'str',
        'organization': 'str',
        'site': 'str',
        'detected_by': 'str',
        'type': 'str',
        'sys_class_name': 'str',
        'os_vendor': 'str',
        'os_product': 'str',
        'os_version': 'str',
        'hw_vendor': 'str',
        'hw_product': 'str',
        'hw_version': 'str',
        'ip_address': 'str',
        'addresses_scope': 'str',
        'addresses_extra': 'str',
        'mac_address': 'str',
        'mac_manufacturer': 'str',
        'newest_mac_age': 'str',
        'macs': 'str',
        'mac_vendors': 'str',
        'name': 'str',
        'tags': 'str',
        'domains': 'str',
        'service_count': 'int',
        'service_count_tcp': 'int',
        'service_count_udp': 'int',
        'service_count_arp': 'int',
        'service_count_icmp': 'int',
        'lowest_ttl': 'int',
        'lowest_rtt': 'int',
        'alive': 'bool',
        'first_discovered': 'str',
        'last_discovered': 'str',
        'last_updated': 'str',
        'comments': 'str'
    }

    attribute_map = {
        'asset_id': 'asset_id',
        'organization': 'organization',
        'site': 'site',
        'detected_by': 'detected_by',
        'type': 'type',
        'sys_class_name': 'sys_class_name',
        'os_vendor': 'os_vendor',
        'os_product': 'os_product',
        'os_version': 'os_version',
        'hw_vendor': 'hw_vendor',
        'hw_product': 'hw_product',
        'hw_version': 'hw_version',
        'ip_address': 'ip_address',
        'addresses_scope': 'addresses_scope',
        'addresses_extra': 'addresses_extra',
        'mac_address': 'mac_address',
        'mac_manufacturer': 'mac_manufacturer',
        'newest_mac_age': 'newest_mac_age',
        'macs': 'macs',
        'mac_vendors': 'mac_vendors',
        'name': 'name',
        'tags': 'tags',
        'domains': 'domains',
        'service_count': 'service_count',
        'service_count_tcp': 'service_count_tcp',
        'service_count_udp': 'service_count_udp',
        'service_count_arp': 'service_count_arp',
        'service_count_icmp': 'service_count_icmp',
        'lowest_ttl': 'lowest_ttl',
        'lowest_rtt': 'lowest_rtt',
        'alive': 'alive',
        'first_discovered': 'first_discovered',
        'last_discovered': 'last_discovered',
        'last_updated': 'last_updated',
        'comments': 'comments'
    }

    def __init__(self, asset_id:str=None, organization:str=None, site:str=None, detected_by:str=None, type:str=None, sys_class_name:str=None, os_vendor:str=None, os_product:str=None, os_version:str=None, hw_vendor:str=None, hw_product:str=None, hw_version:str=None, ip_address:str=None, addresses_scope:str=None, addresses_extra:str=None, mac_address:str=None, mac_manufacturer:str=None, newest_mac_age:str=None, macs:str=None, mac_vendors:str=None, name:str=None, tags:str=None, domains:str=None, service_count:int=None, service_count_tcp:int=None, service_count_udp:int=None, service_count_arp:int=None, service_count_icmp:int=None, lowest_ttl:int=None, lowest_rtt:int=None, alive:bool=None, first_discovered:str=None, last_discovered:str=None, last_updated:str=None, comments:str=None):  # noqa: E501
        """AssetServiceNow - a model defined in Swagger"""  # noqa: E501
        self._asset_id = None
        self._organization = None
        self._site = None
        self._detected_by = None
        self._type = None
        self._sys_class_name = None
        self._os_vendor = None
        self._os_product = None
        self._os_version = None
        self._hw_vendor = None
        self._hw_product = None
        self._hw_version = None
        self._ip_address = None
        self._addresses_scope = None
        self._addresses_extra = None
        self._mac_address = None
        self._mac_manufacturer = None
        self._newest_mac_age = None
        self._macs = None
        self._mac_vendors = None
        self._name = None
        self._tags = None
        self._domains = None
        self._service_count = None
        self._service_count_tcp = None
        self._service_count_udp = None
        self._service_count_arp = None
        self._service_count_icmp = None
        self._lowest_ttl = None
        self._lowest_rtt = None
        self._alive = None
        self._first_discovered = None
        self._last_discovered = None
        self._last_updated = None
        self._comments = None
        self.discriminator = None
        self.asset_id = asset_id
        if organization is not None:
            self.organization = organization
        if site is not None:
            self.site = site
        if detected_by is not None:
            self.detected_by = detected_by
        if type is not None:
            self.type = type
        if sys_class_name is not None:
            self.sys_class_name = sys_class_name
        if os_vendor is not None:
            self.os_vendor = os_vendor
        if os_product is not None:
            self.os_product = os_product
        if os_version is not None:
            self.os_version = os_version
        if hw_vendor is not None:
            self.hw_vendor = hw_vendor
        if hw_product is not None:
            self.hw_product = hw_product
        if hw_version is not None:
            self.hw_version = hw_version
        if ip_address is not None:
            self.ip_address = ip_address
        if addresses_scope is not None:
            self.addresses_scope = addresses_scope
        if addresses_extra is not None:
            self.addresses_extra = addresses_extra
        if mac_address is not None:
            self.mac_address = mac_address
        if mac_manufacturer is not None:
            self.mac_manufacturer = mac_manufacturer
        if newest_mac_age is not None:
            self.newest_mac_age = newest_mac_age
        if macs is not None:
            self.macs = macs
        if mac_vendors is not None:
            self.mac_vendors = mac_vendors
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags
        if domains is not None:
            self.domains = domains
        if service_count is not None:
            self.service_count = service_count
        if service_count_tcp is not None:
            self.service_count_tcp = service_count_tcp
        if service_count_udp is not None:
            self.service_count_udp = service_count_udp
        if service_count_arp is not None:
            self.service_count_arp = service_count_arp
        if service_count_icmp is not None:
            self.service_count_icmp = service_count_icmp
        if lowest_ttl is not None:
            self.lowest_ttl = lowest_ttl
        if lowest_rtt is not None:
            self.lowest_rtt = lowest_rtt
        if alive is not None:
            self.alive = alive
        if first_discovered is not None:
            self.first_discovered = first_discovered
        if last_discovered is not None:
            self.last_discovered = last_discovered
        if last_updated is not None:
            self.last_updated = last_updated
        if comments is not None:
            self.comments = comments

    @property
    def asset_id(self):
        """Gets the asset_id of this AssetServiceNow.  # noqa: E501


        :return: The asset_id of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this AssetServiceNow.


        :param asset_id: The asset_id of this AssetServiceNow.  # noqa: E501
        :type: str
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def organization(self):
        """Gets the organization of this AssetServiceNow.  # noqa: E501


        :return: The organization of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this AssetServiceNow.


        :param organization: The organization of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def site(self):
        """Gets the site of this AssetServiceNow.  # noqa: E501


        :return: The site of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this AssetServiceNow.


        :param site: The site of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def detected_by(self):
        """Gets the detected_by of this AssetServiceNow.  # noqa: E501


        :return: The detected_by of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._detected_by

    @detected_by.setter
    def detected_by(self, detected_by):
        """Sets the detected_by of this AssetServiceNow.


        :param detected_by: The detected_by of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._detected_by = detected_by

    @property
    def type(self):
        """Gets the type of this AssetServiceNow.  # noqa: E501


        :return: The type of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetServiceNow.


        :param type: The type of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def sys_class_name(self):
        """Gets the sys_class_name of this AssetServiceNow.  # noqa: E501


        :return: The sys_class_name of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._sys_class_name

    @sys_class_name.setter
    def sys_class_name(self, sys_class_name):
        """Sets the sys_class_name of this AssetServiceNow.


        :param sys_class_name: The sys_class_name of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._sys_class_name = sys_class_name

    @property
    def os_vendor(self):
        """Gets the os_vendor of this AssetServiceNow.  # noqa: E501


        :return: The os_vendor of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._os_vendor

    @os_vendor.setter
    def os_vendor(self, os_vendor):
        """Sets the os_vendor of this AssetServiceNow.


        :param os_vendor: The os_vendor of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._os_vendor = os_vendor

    @property
    def os_product(self):
        """Gets the os_product of this AssetServiceNow.  # noqa: E501


        :return: The os_product of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._os_product

    @os_product.setter
    def os_product(self, os_product):
        """Sets the os_product of this AssetServiceNow.


        :param os_product: The os_product of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._os_product = os_product

    @property
    def os_version(self):
        """Gets the os_version of this AssetServiceNow.  # noqa: E501


        :return: The os_version of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this AssetServiceNow.


        :param os_version: The os_version of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def hw_vendor(self):
        """Gets the hw_vendor of this AssetServiceNow.  # noqa: E501


        :return: The hw_vendor of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._hw_vendor

    @hw_vendor.setter
    def hw_vendor(self, hw_vendor):
        """Sets the hw_vendor of this AssetServiceNow.


        :param hw_vendor: The hw_vendor of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._hw_vendor = hw_vendor

    @property
    def hw_product(self):
        """Gets the hw_product of this AssetServiceNow.  # noqa: E501


        :return: The hw_product of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._hw_product

    @hw_product.setter
    def hw_product(self, hw_product):
        """Sets the hw_product of this AssetServiceNow.


        :param hw_product: The hw_product of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._hw_product = hw_product

    @property
    def hw_version(self):
        """Gets the hw_version of this AssetServiceNow.  # noqa: E501


        :return: The hw_version of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._hw_version

    @hw_version.setter
    def hw_version(self, hw_version):
        """Sets the hw_version of this AssetServiceNow.


        :param hw_version: The hw_version of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._hw_version = hw_version

    @property
    def ip_address(self):
        """Gets the ip_address of this AssetServiceNow.  # noqa: E501


        :return: The ip_address of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AssetServiceNow.


        :param ip_address: The ip_address of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def addresses_scope(self):
        """Gets the addresses_scope of this AssetServiceNow.  # noqa: E501


        :return: The addresses_scope of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._addresses_scope

    @addresses_scope.setter
    def addresses_scope(self, addresses_scope):
        """Sets the addresses_scope of this AssetServiceNow.


        :param addresses_scope: The addresses_scope of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._addresses_scope = addresses_scope

    @property
    def addresses_extra(self):
        """Gets the addresses_extra of this AssetServiceNow.  # noqa: E501


        :return: The addresses_extra of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._addresses_extra

    @addresses_extra.setter
    def addresses_extra(self, addresses_extra):
        """Sets the addresses_extra of this AssetServiceNow.


        :param addresses_extra: The addresses_extra of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._addresses_extra = addresses_extra

    @property
    def mac_address(self):
        """Gets the mac_address of this AssetServiceNow.  # noqa: E501


        :return: The mac_address of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this AssetServiceNow.


        :param mac_address: The mac_address of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mac_manufacturer(self):
        """Gets the mac_manufacturer of this AssetServiceNow.  # noqa: E501


        :return: The mac_manufacturer of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._mac_manufacturer

    @mac_manufacturer.setter
    def mac_manufacturer(self, mac_manufacturer):
        """Sets the mac_manufacturer of this AssetServiceNow.


        :param mac_manufacturer: The mac_manufacturer of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._mac_manufacturer = mac_manufacturer

    @property
    def newest_mac_age(self):
        """Gets the newest_mac_age of this AssetServiceNow.  # noqa: E501


        :return: The newest_mac_age of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._newest_mac_age

    @newest_mac_age.setter
    def newest_mac_age(self, newest_mac_age):
        """Sets the newest_mac_age of this AssetServiceNow.


        :param newest_mac_age: The newest_mac_age of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._newest_mac_age = newest_mac_age

    @property
    def macs(self):
        """Gets the macs of this AssetServiceNow.  # noqa: E501


        :return: The macs of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._macs

    @macs.setter
    def macs(self, macs):
        """Sets the macs of this AssetServiceNow.


        :param macs: The macs of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._macs = macs

    @property
    def mac_vendors(self):
        """Gets the mac_vendors of this AssetServiceNow.  # noqa: E501


        :return: The mac_vendors of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._mac_vendors

    @mac_vendors.setter
    def mac_vendors(self, mac_vendors):
        """Sets the mac_vendors of this AssetServiceNow.


        :param mac_vendors: The mac_vendors of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._mac_vendors = mac_vendors

    @property
    def name(self):
        """Gets the name of this AssetServiceNow.  # noqa: E501


        :return: The name of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetServiceNow.


        :param name: The name of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this AssetServiceNow.  # noqa: E501


        :return: The tags of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssetServiceNow.


        :param tags: The tags of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def domains(self):
        """Gets the domains of this AssetServiceNow.  # noqa: E501


        :return: The domains of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this AssetServiceNow.


        :param domains: The domains of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._domains = domains

    @property
    def service_count(self):
        """Gets the service_count of this AssetServiceNow.  # noqa: E501


        :return: The service_count of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._service_count

    @service_count.setter
    def service_count(self, service_count):
        """Sets the service_count of this AssetServiceNow.


        :param service_count: The service_count of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._service_count = service_count

    @property
    def service_count_tcp(self):
        """Gets the service_count_tcp of this AssetServiceNow.  # noqa: E501


        :return: The service_count_tcp of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._service_count_tcp

    @service_count_tcp.setter
    def service_count_tcp(self, service_count_tcp):
        """Sets the service_count_tcp of this AssetServiceNow.


        :param service_count_tcp: The service_count_tcp of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._service_count_tcp = service_count_tcp

    @property
    def service_count_udp(self):
        """Gets the service_count_udp of this AssetServiceNow.  # noqa: E501


        :return: The service_count_udp of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._service_count_udp

    @service_count_udp.setter
    def service_count_udp(self, service_count_udp):
        """Sets the service_count_udp of this AssetServiceNow.


        :param service_count_udp: The service_count_udp of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._service_count_udp = service_count_udp

    @property
    def service_count_arp(self):
        """Gets the service_count_arp of this AssetServiceNow.  # noqa: E501


        :return: The service_count_arp of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._service_count_arp

    @service_count_arp.setter
    def service_count_arp(self, service_count_arp):
        """Sets the service_count_arp of this AssetServiceNow.


        :param service_count_arp: The service_count_arp of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._service_count_arp = service_count_arp

    @property
    def service_count_icmp(self):
        """Gets the service_count_icmp of this AssetServiceNow.  # noqa: E501


        :return: The service_count_icmp of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._service_count_icmp

    @service_count_icmp.setter
    def service_count_icmp(self, service_count_icmp):
        """Sets the service_count_icmp of this AssetServiceNow.


        :param service_count_icmp: The service_count_icmp of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._service_count_icmp = service_count_icmp

    @property
    def lowest_ttl(self):
        """Gets the lowest_ttl of this AssetServiceNow.  # noqa: E501


        :return: The lowest_ttl of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._lowest_ttl

    @lowest_ttl.setter
    def lowest_ttl(self, lowest_ttl):
        """Sets the lowest_ttl of this AssetServiceNow.


        :param lowest_ttl: The lowest_ttl of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._lowest_ttl = lowest_ttl

    @property
    def lowest_rtt(self):
        """Gets the lowest_rtt of this AssetServiceNow.  # noqa: E501


        :return: The lowest_rtt of this AssetServiceNow.  # noqa: E501
        :rtype: int
        """
        return self._lowest_rtt

    @lowest_rtt.setter
    def lowest_rtt(self, lowest_rtt):
        """Sets the lowest_rtt of this AssetServiceNow.


        :param lowest_rtt: The lowest_rtt of this AssetServiceNow.  # noqa: E501
        :type: int
        """

        self._lowest_rtt = lowest_rtt

    @property
    def alive(self):
        """Gets the alive of this AssetServiceNow.  # noqa: E501


        :return: The alive of this AssetServiceNow.  # noqa: E501
        :rtype: bool
        """
        return self._alive

    @alive.setter
    def alive(self, alive):
        """Sets the alive of this AssetServiceNow.


        :param alive: The alive of this AssetServiceNow.  # noqa: E501
        :type: bool
        """

        self._alive = alive

    @property
    def first_discovered(self):
        """Gets the first_discovered of this AssetServiceNow.  # noqa: E501


        :return: The first_discovered of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._first_discovered

    @first_discovered.setter
    def first_discovered(self, first_discovered):
        """Sets the first_discovered of this AssetServiceNow.


        :param first_discovered: The first_discovered of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._first_discovered = first_discovered

    @property
    def last_discovered(self):
        """Gets the last_discovered of this AssetServiceNow.  # noqa: E501


        :return: The last_discovered of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._last_discovered

    @last_discovered.setter
    def last_discovered(self, last_discovered):
        """Sets the last_discovered of this AssetServiceNow.


        :param last_discovered: The last_discovered of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._last_discovered = last_discovered

    @property
    def last_updated(self):
        """Gets the last_updated of this AssetServiceNow.  # noqa: E501


        :return: The last_updated of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AssetServiceNow.


        :param last_updated: The last_updated of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def comments(self):
        """Gets the comments of this AssetServiceNow.  # noqa: E501


        :return: The comments of this AssetServiceNow.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AssetServiceNow.


        :param comments: The comments of this AssetServiceNow.  # noqa: E501
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(AssetServiceNow, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetServiceNow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
