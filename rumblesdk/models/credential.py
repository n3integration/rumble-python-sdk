# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Credential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'name': 'str',
        'type': 'str',
        'created_at': 'int',
        'created_by_id': 'str',
        'created_by_email': 'str',
        'acl': 'dict(str, object)',
        '_global': 'bool',
        'cidrs': 'list[str]',
        'last_used_at': 'int',
        'last_used_by_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'client_id',
        'name': 'name',
        'type': 'type',
        'created_at': 'created_at',
        'created_by_id': 'created_by_id',
        'created_by_email': 'created_by_email',
        'acl': 'acl',
        '_global': 'global',
        'cidrs': 'cidrs',
        'last_used_at': 'last_used_at',
        'last_used_by_id': 'last_used_by_id'
    }

    def __init__(self, id:str=None, client_id:str=None, name:str=None, type:str=None, created_at:int=None, created_by_id:str=None, created_by_email:str=None, acl:dict=None, _global:bool=None, cidrs:list[str]=None, last_used_at:int=None, last_used_by_id:str=None):  # noqa: E501
        """Credential - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client_id = None
        self._name = None
        self._type = None
        self._created_at = None
        self._created_by_id = None
        self._created_by_email = None
        self._acl = None
        self.__global = None
        self._cidrs = None
        self._last_used_at = None
        self._last_used_by_id = None
        self.discriminator = None
        self.id = id
        if client_id is not None:
            self.client_id = client_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by_email is not None:
            self.created_by_email = created_by_email
        if acl is not None:
            self.acl = acl
        if _global is not None:
            self._global = _global
        if cidrs is not None:
            self.cidrs = cidrs
        if last_used_at is not None:
            self.last_used_at = last_used_at
        if last_used_by_id is not None:
            self.last_used_by_id = last_used_by_id

    @property
    def id(self):
        """Gets the id of this Credential.  # noqa: E501


        :return: The id of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Credential.


        :param id: The id of this Credential.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this Credential.  # noqa: E501


        :return: The client_id of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Credential.


        :param client_id: The client_id of this Credential.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def name(self):
        """Gets the name of this Credential.  # noqa: E501


        :return: The name of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Credential.


        :param name: The name of this Credential.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Credential.  # noqa: E501

        The service the credentials are for.  # noqa: E501

        :return: The type of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Credential.

        The service the credentials are for.  # noqa: E501

        :param type: The type of this Credential.  # noqa: E501
        :type: str
        """
        allowed_values = ["miradore_api_key_v1", "aws_access_secret", "crowdstrike_api_key", "azure_client_secret", "azure_username_password", "censys_search_api_key", "snmpv2_community", "snmpv3_credential", "vmware_username_password"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this Credential.  # noqa: E501


        :return: The created_at of this Credential.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Credential.


        :param created_at: The created_at of this Credential.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Credential.  # noqa: E501


        :return: The created_by_id of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Credential.


        :param created_by_id: The created_by_id of this Credential.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by_email(self):
        """Gets the created_by_email of this Credential.  # noqa: E501


        :return: The created_by_email of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._created_by_email

    @created_by_email.setter
    def created_by_email(self, created_by_email):
        """Sets the created_by_email of this Credential.


        :param created_by_email: The created_by_email of this Credential.  # noqa: E501
        :type: str
        """

        self._created_by_email = created_by_email

    @property
    def acl(self):
        """Gets the acl of this Credential.  # noqa: E501


        :return: The acl of this Credential.  # noqa: E501
        :rtype: dict
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Credential.


        :param acl: The acl of this Credential.  # noqa: E501
        :type: dict
        """

        self._acl = acl

    @property
    def _global(self):
        """Gets the _global of this Credential.  # noqa: E501


        :return: The _global of this Credential.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this Credential.


        :param _global: The _global of this Credential.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def cidrs(self):
        """Gets the cidrs of this Credential.  # noqa: E501


        :return: The cidrs of this Credential.  # noqa: E501
        :rtype: list[str]
        """
        return self._cidrs

    @cidrs.setter
    def cidrs(self, cidrs):
        """Sets the cidrs of this Credential.


        :param cidrs: The cidrs of this Credential.  # noqa: E501
        :type: list[str]
        """

        self._cidrs = cidrs

    @property
    def last_used_at(self):
        """Gets the last_used_at of this Credential.  # noqa: E501


        :return: The last_used_at of this Credential.  # noqa: E501
        :rtype: int
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """Sets the last_used_at of this Credential.


        :param last_used_at: The last_used_at of this Credential.  # noqa: E501
        :type: int
        """

        self._last_used_at = last_used_at

    @property
    def last_used_by_id(self):
        """Gets the last_used_by_id of this Credential.  # noqa: E501


        :return: The last_used_by_id of this Credential.  # noqa: E501
        :rtype: str
        """
        return self._last_used_by_id

    @last_used_by_id.setter
    def last_used_by_id(self, last_used_by_id):
        """Sets the last_used_by_id of this Credential.


        :param last_used_by_id: The last_used_by_id of this Credential.  # noqa: E501
        :type: str
        """

        self._last_used_by_id = last_used_by_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(Credential, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Credential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
