# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'client_id': 'str',
        'download_token': 'str',
        'download_token_created_at': 'int',
        'permanent': 'bool',
        'name': 'str',
        'description': 'str',
        'inactive': 'bool',
        'deactivated_at': 'int',
        'service_count': 'int',
        'service_count_tcp': 'int',
        'service_count_udp': 'int',
        'service_count_arp': 'int',
        'service_count_icmp': 'int',
        'asset_count': 'int',
        'export_token': 'str',
        'export_token_created_at': 'int',
        'export_token_last_used_at': 'int',
        'export_token_last_used_by': 'str',
        'export_token_counter': 'int',
        'project': 'bool',
        'parent_id': 'str',
        'expiration_assets_stale': 'int',
        'expiration_assets_offline': 'int',
        'expiration_scans': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'client_id': 'client_id',
        'download_token': 'download_token',
        'download_token_created_at': 'download_token_created_at',
        'permanent': 'permanent',
        'name': 'name',
        'description': 'description',
        'inactive': 'inactive',
        'deactivated_at': 'deactivated_at',
        'service_count': 'service_count',
        'service_count_tcp': 'service_count_tcp',
        'service_count_udp': 'service_count_udp',
        'service_count_arp': 'service_count_arp',
        'service_count_icmp': 'service_count_icmp',
        'asset_count': 'asset_count',
        'export_token': 'export_token',
        'export_token_created_at': 'export_token_created_at',
        'export_token_last_used_at': 'export_token_last_used_at',
        'export_token_last_used_by': 'export_token_last_used_by',
        'export_token_counter': 'export_token_counter',
        'project': 'project',
        'parent_id': 'parent_id',
        'expiration_assets_stale': 'expiration_assets_stale',
        'expiration_assets_offline': 'expiration_assets_offline',
        'expiration_scans': 'expiration_scans'
    }

    def __init__(self, id:str=None, created_at:int=None, updated_at:int=None, client_id:str=None, download_token:str=None, download_token_created_at:int=None, permanent:bool=None, name:str=None, description:str=None, inactive:bool=None, deactivated_at:int=None, service_count:int=None, service_count_tcp:int=None, service_count_udp:int=None, service_count_arp:int=None, service_count_icmp:int=None, asset_count:int=None, export_token:str=None, export_token_created_at:int=None, export_token_last_used_at:int=None, export_token_last_used_by:str=None, export_token_counter:int=None, project:bool=None, parent_id:str=None, expiration_assets_stale:int=None, expiration_assets_offline:int=None, expiration_scans:int=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._client_id = None
        self._download_token = None
        self._download_token_created_at = None
        self._permanent = None
        self._name = None
        self._description = None
        self._inactive = None
        self._deactivated_at = None
        self._service_count = None
        self._service_count_tcp = None
        self._service_count_udp = None
        self._service_count_arp = None
        self._service_count_icmp = None
        self._asset_count = None
        self._export_token = None
        self._export_token_created_at = None
        self._export_token_last_used_at = None
        self._export_token_last_used_by = None
        self._export_token_counter = None
        self._project = None
        self._parent_id = None
        self._expiration_assets_stale = None
        self._expiration_assets_offline = None
        self._expiration_scans = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if client_id is not None:
            self.client_id = client_id
        if download_token is not None:
            self.download_token = download_token
        if download_token_created_at is not None:
            self.download_token_created_at = download_token_created_at
        if permanent is not None:
            self.permanent = permanent
        self.name = name
        if description is not None:
            self.description = description
        if inactive is not None:
            self.inactive = inactive
        if deactivated_at is not None:
            self.deactivated_at = deactivated_at
        if service_count is not None:
            self.service_count = service_count
        if service_count_tcp is not None:
            self.service_count_tcp = service_count_tcp
        if service_count_udp is not None:
            self.service_count_udp = service_count_udp
        if service_count_arp is not None:
            self.service_count_arp = service_count_arp
        if service_count_icmp is not None:
            self.service_count_icmp = service_count_icmp
        if asset_count is not None:
            self.asset_count = asset_count
        if export_token is not None:
            self.export_token = export_token
        if export_token_created_at is not None:
            self.export_token_created_at = export_token_created_at
        if export_token_last_used_at is not None:
            self.export_token_last_used_at = export_token_last_used_at
        if export_token_last_used_by is not None:
            self.export_token_last_used_by = export_token_last_used_by
        if export_token_counter is not None:
            self.export_token_counter = export_token_counter
        if project is not None:
            self.project = project
        if parent_id is not None:
            self.parent_id = parent_id
        if expiration_assets_stale is not None:
            self.expiration_assets_stale = expiration_assets_stale
        if expiration_assets_offline is not None:
            self.expiration_assets_offline = expiration_assets_offline
        if expiration_scans is not None:
            self.expiration_scans = expiration_scans

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Organization.  # noqa: E501


        :return: The created_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Organization.


        :param created_at: The created_at of this Organization.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Organization.  # noqa: E501


        :return: The updated_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Organization.


        :param updated_at: The updated_at of this Organization.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def client_id(self):
        """Gets the client_id of this Organization.  # noqa: E501


        :return: The client_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Organization.


        :param client_id: The client_id of this Organization.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def download_token(self):
        """Gets the download_token of this Organization.  # noqa: E501


        :return: The download_token of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._download_token

    @download_token.setter
    def download_token(self, download_token):
        """Sets the download_token of this Organization.


        :param download_token: The download_token of this Organization.  # noqa: E501
        :type: str
        """

        self._download_token = download_token

    @property
    def download_token_created_at(self):
        """Gets the download_token_created_at of this Organization.  # noqa: E501


        :return: The download_token_created_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._download_token_created_at

    @download_token_created_at.setter
    def download_token_created_at(self, download_token_created_at):
        """Sets the download_token_created_at of this Organization.


        :param download_token_created_at: The download_token_created_at of this Organization.  # noqa: E501
        :type: int
        """

        self._download_token_created_at = download_token_created_at

    @property
    def permanent(self):
        """Gets the permanent of this Organization.  # noqa: E501


        :return: The permanent of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this Organization.


        :param permanent: The permanent of this Organization.  # noqa: E501
        :type: bool
        """

        self._permanent = permanent

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501


        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.


        :param description: The description of this Organization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def inactive(self):
        """Gets the inactive of this Organization.  # noqa: E501


        :return: The inactive of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this Organization.


        :param inactive: The inactive of this Organization.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def deactivated_at(self):
        """Gets the deactivated_at of this Organization.  # noqa: E501


        :return: The deactivated_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._deactivated_at

    @deactivated_at.setter
    def deactivated_at(self, deactivated_at):
        """Sets the deactivated_at of this Organization.


        :param deactivated_at: The deactivated_at of this Organization.  # noqa: E501
        :type: int
        """

        self._deactivated_at = deactivated_at

    @property
    def service_count(self):
        """Gets the service_count of this Organization.  # noqa: E501


        :return: The service_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._service_count

    @service_count.setter
    def service_count(self, service_count):
        """Sets the service_count of this Organization.


        :param service_count: The service_count of this Organization.  # noqa: E501
        :type: int
        """

        self._service_count = service_count

    @property
    def service_count_tcp(self):
        """Gets the service_count_tcp of this Organization.  # noqa: E501


        :return: The service_count_tcp of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._service_count_tcp

    @service_count_tcp.setter
    def service_count_tcp(self, service_count_tcp):
        """Sets the service_count_tcp of this Organization.


        :param service_count_tcp: The service_count_tcp of this Organization.  # noqa: E501
        :type: int
        """

        self._service_count_tcp = service_count_tcp

    @property
    def service_count_udp(self):
        """Gets the service_count_udp of this Organization.  # noqa: E501


        :return: The service_count_udp of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._service_count_udp

    @service_count_udp.setter
    def service_count_udp(self, service_count_udp):
        """Sets the service_count_udp of this Organization.


        :param service_count_udp: The service_count_udp of this Organization.  # noqa: E501
        :type: int
        """

        self._service_count_udp = service_count_udp

    @property
    def service_count_arp(self):
        """Gets the service_count_arp of this Organization.  # noqa: E501


        :return: The service_count_arp of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._service_count_arp

    @service_count_arp.setter
    def service_count_arp(self, service_count_arp):
        """Sets the service_count_arp of this Organization.


        :param service_count_arp: The service_count_arp of this Organization.  # noqa: E501
        :type: int
        """

        self._service_count_arp = service_count_arp

    @property
    def service_count_icmp(self):
        """Gets the service_count_icmp of this Organization.  # noqa: E501


        :return: The service_count_icmp of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._service_count_icmp

    @service_count_icmp.setter
    def service_count_icmp(self, service_count_icmp):
        """Sets the service_count_icmp of this Organization.


        :param service_count_icmp: The service_count_icmp of this Organization.  # noqa: E501
        :type: int
        """

        self._service_count_icmp = service_count_icmp

    @property
    def asset_count(self):
        """Gets the asset_count of this Organization.  # noqa: E501


        :return: The asset_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._asset_count

    @asset_count.setter
    def asset_count(self, asset_count):
        """Sets the asset_count of this Organization.


        :param asset_count: The asset_count of this Organization.  # noqa: E501
        :type: int
        """

        self._asset_count = asset_count

    @property
    def export_token(self):
        """Gets the export_token of this Organization.  # noqa: E501


        :return: The export_token of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._export_token

    @export_token.setter
    def export_token(self, export_token):
        """Sets the export_token of this Organization.


        :param export_token: The export_token of this Organization.  # noqa: E501
        :type: str
        """

        self._export_token = export_token

    @property
    def export_token_created_at(self):
        """Gets the export_token_created_at of this Organization.  # noqa: E501


        :return: The export_token_created_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._export_token_created_at

    @export_token_created_at.setter
    def export_token_created_at(self, export_token_created_at):
        """Sets the export_token_created_at of this Organization.


        :param export_token_created_at: The export_token_created_at of this Organization.  # noqa: E501
        :type: int
        """

        self._export_token_created_at = export_token_created_at

    @property
    def export_token_last_used_at(self):
        """Gets the export_token_last_used_at of this Organization.  # noqa: E501


        :return: The export_token_last_used_at of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._export_token_last_used_at

    @export_token_last_used_at.setter
    def export_token_last_used_at(self, export_token_last_used_at):
        """Sets the export_token_last_used_at of this Organization.


        :param export_token_last_used_at: The export_token_last_used_at of this Organization.  # noqa: E501
        :type: int
        """

        self._export_token_last_used_at = export_token_last_used_at

    @property
    def export_token_last_used_by(self):
        """Gets the export_token_last_used_by of this Organization.  # noqa: E501


        :return: The export_token_last_used_by of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._export_token_last_used_by

    @export_token_last_used_by.setter
    def export_token_last_used_by(self, export_token_last_used_by):
        """Sets the export_token_last_used_by of this Organization.


        :param export_token_last_used_by: The export_token_last_used_by of this Organization.  # noqa: E501
        :type: str
        """

        self._export_token_last_used_by = export_token_last_used_by

    @property
    def export_token_counter(self):
        """Gets the export_token_counter of this Organization.  # noqa: E501


        :return: The export_token_counter of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._export_token_counter

    @export_token_counter.setter
    def export_token_counter(self, export_token_counter):
        """Sets the export_token_counter of this Organization.


        :param export_token_counter: The export_token_counter of this Organization.  # noqa: E501
        :type: int
        """

        self._export_token_counter = export_token_counter

    @property
    def project(self):
        """Gets the project of this Organization.  # noqa: E501


        :return: The project of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Organization.


        :param project: The project of this Organization.  # noqa: E501
        :type: bool
        """

        self._project = project

    @property
    def parent_id(self):
        """Gets the parent_id of this Organization.  # noqa: E501


        :return: The parent_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Organization.


        :param parent_id: The parent_id of this Organization.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def expiration_assets_stale(self):
        """Gets the expiration_assets_stale of this Organization.  # noqa: E501


        :return: The expiration_assets_stale of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._expiration_assets_stale

    @expiration_assets_stale.setter
    def expiration_assets_stale(self, expiration_assets_stale):
        """Sets the expiration_assets_stale of this Organization.


        :param expiration_assets_stale: The expiration_assets_stale of this Organization.  # noqa: E501
        :type: int
        """

        self._expiration_assets_stale = expiration_assets_stale

    @property
    def expiration_assets_offline(self):
        """Gets the expiration_assets_offline of this Organization.  # noqa: E501


        :return: The expiration_assets_offline of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._expiration_assets_offline

    @expiration_assets_offline.setter
    def expiration_assets_offline(self, expiration_assets_offline):
        """Sets the expiration_assets_offline of this Organization.


        :param expiration_assets_offline: The expiration_assets_offline of this Organization.  # noqa: E501
        :type: int
        """

        self._expiration_assets_offline = expiration_assets_offline

    @property
    def expiration_scans(self):
        """Gets the expiration_scans of this Organization.  # noqa: E501


        :return: The expiration_scans of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._expiration_scans

    @expiration_scans.setter
    def expiration_scans(self, expiration_scans):
        """Sets the expiration_scans of this Organization.


        :param expiration_scans: The expiration_scans of this Organization.  # noqa: E501
        :type: int
        """

        self._expiration_scans = expiration_scans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
