# coding: utf-8

"""
    Rumble API

    Rumble Network Discovery API  # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: support@rumble.run
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CredentialOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'acl': 'dict(str, object)',
        '_global': 'bool',
        'cidrs': 'str',
        'secret': 'CredentialFields'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'acl': 'acl',
        '_global': 'global',
        'cidrs': 'cidrs',
        'secret': 'secret'
    }

    def __init__(self, name:str=None, type:str=None, acl:dict=None, _global:bool=None, cidrs:str=None, secret:CredentialFields=None):  # noqa: E501
        """CredentialOptions - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._acl = None
        self.__global = None
        self._cidrs = None
        self._secret = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if acl is not None:
            self.acl = acl
        if _global is not None:
            self._global = _global
        if cidrs is not None:
            self.cidrs = cidrs
        if secret is not None:
            self.secret = secret

    @property
    def name(self):
        """Gets the name of this CredentialOptions.  # noqa: E501


        :return: The name of this CredentialOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialOptions.


        :param name: The name of this CredentialOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CredentialOptions.  # noqa: E501


        :return: The type of this CredentialOptions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialOptions.


        :param type: The type of this CredentialOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["miradore_api_key_v1", "aws_access_secret"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def acl(self):
        """Gets the acl of this CredentialOptions.  # noqa: E501


        :return: The acl of this CredentialOptions.  # noqa: E501
        :rtype: dict
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CredentialOptions.


        :param acl: The acl of this CredentialOptions.  # noqa: E501
        :type: dict
        """

        self._acl = acl

    @property
    def _global(self):
        """Gets the _global of this CredentialOptions.  # noqa: E501


        :return: The _global of this CredentialOptions.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this CredentialOptions.


        :param _global: The _global of this CredentialOptions.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def cidrs(self):
        """Gets the cidrs of this CredentialOptions.  # noqa: E501


        :return: The cidrs of this CredentialOptions.  # noqa: E501
        :rtype: str
        """
        return self._cidrs

    @cidrs.setter
    def cidrs(self, cidrs):
        """Sets the cidrs of this CredentialOptions.


        :param cidrs: The cidrs of this CredentialOptions.  # noqa: E501
        :type: str
        """

        self._cidrs = cidrs

    @property
    def secret(self):
        """Gets the secret of this CredentialOptions.  # noqa: E501


        :return: The secret of this CredentialOptions.  # noqa: E501
        :rtype: CredentialFields
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CredentialOptions.


        :param secret: The secret of this CredentialOptions.  # noqa: E501
        :type: CredentialFields
        """

        self._secret = secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is not None:
                result[attr] = value
        if issubclass(CredentialOptions, dict):
            for key, value in self.items():
                if value is not None:
                    result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
